version: '3.8'

services:
  # Backend API
  backend:
    build: ./backend
    container_name: partexplorer-backend
    restart: unless-stopped
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-partexplorer}
      - DB_PASSWORD=${DB_PASSWORD:-partexplorer}
      - DB_NAME=${DB_NAME:-partexplorer}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - partexplorer-network
    volumes:
      - ./logs/backend:/app/logs

  # Frontend React
  frontend:
    build: ./frontend
    container_name: partexplorer-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - partexplorer-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: partexplorer-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-partexplorer}
      - POSTGRES_USER=${DB_USER:-partexplorer}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-partexplorer}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./references/ddl_catalogo.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - partexplorer-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: partexplorer-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - partexplorer-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: partexplorer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - partexplorer-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: partexplorer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - partexplorer-network

volumes:
  postgres_data:
  elasticsearch_data:
  redis_data:

networks:
  partexplorer-network:
    driver: bridge 